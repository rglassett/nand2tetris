// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A-instruction vs. C-instruction
    Not(in=instruction[15], out=aInstruction);

    Mux16(
      a=aluOutput,
      b[0..14]=instruction[0..14],
      b[15]=false,
      sel=aInstruction,
      out=addressInput
    );

    // 'comp' field: control bits for ALU operation

    // instruction[12] is the 'a' bit of the C-instruction.
    // When instruction[12] == 0, operate with x=A and y=D
    // When instruction[12] == 1, operate with x=M and y=D

    Mux16(
      a=address,
      b=inM,
      sel=instruction[12],
      out=amOperand
    );

    ALU(
      x=data,
      y=amOperand,
      zx=instruction[11],
      nx=instruction[10],
      zy=instruction[9],
      ny=instruction[8],
      f=instruction[7],
      no=instruction[6],
      out=aluOutput,
      out=outM,
      zr=aluZero,
      ng=aluNegative
    );

    // 'dest' field: control bits for where to write

    Or(
      a=aInstruction,
      b=instruction[5],
      out=writeA
    );

    And(
      a=instruction[15],
      b=instruction[4],
      out=writeD
    );

    And(
      a=instruction[15],
      b=instruction[3],
      out=writeM
    );

    // 'jump' field: control bits for PC operation

    Not(in=aluNegative, out=aluPositive);
    Not(in=aluZero, out=aluNonzero);

    And(a=aluNonzero, b=aluPositive, out=aluGreaterThan);

    And(
      a=instruction[0],
      b=aluGreaterThan,
      out=greaterThanJump
    );

    And(
      a=instruction[1],
      b=aluZero,
      out=equalJump
    );

    And(
      a=instruction[2],
      b=aluNegative,
      out=lessThanJump
    );

    Or(
      a=greaterThanJump,
      b=equalJump,
      out=greaterEqualJump
    );

    Or(
      a=lessThanJump,
      b=greaterEqualJump,
      out=possibleJump
    );

    And(
      a=instruction[15],
      b=possibleJump,
      out=willJump
    );

    Not(in=willJump, out=wontJump);

    // main hardware components

    ARegister(
      in=addressInput,
      load=writeA,
      out=address,
      out[0..14]=addressM
    );

    DRegister(
      in=aluOutput,
      load=writeD,
      out=data
    );

    PC(
      in=address,
      load=willJump,
      inc=wontJump,
      reset=reset,
      out[0..14]=pc
    );
}
